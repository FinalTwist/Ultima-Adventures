using System;
using Server;
using Server.Mobiles;

namespace Server.Items
{
	public class SlayerGroup
	{
		private static SlayerEntry[] m_TotalEntries;
		private static SlayerGroup[] m_Groups;

		public static SlayerEntry[] TotalEntries
		{
			get{ return m_TotalEntries; }
		}

		public static SlayerGroup[] Groups
		{
			get{ return m_Groups; }
		}

		public static SlayerEntry GetEntryByName( SlayerName name )
		{
			int v = (int)name;

			if ( v >= 0 && v < m_TotalEntries.Length )
				return m_TotalEntries[v];

			return null;
		}

		public static SlayerName GetLootSlayerType( Type type )
		{
			for ( int i = 0; i < m_Groups.Length; ++i )
			{
				SlayerGroup group = m_Groups[i];
				Type[] foundOn = group.FoundOn;

				bool inGroup = false;

				for ( int j = 0; foundOn != null && !inGroup && j < foundOn.Length; ++j )
					inGroup = ( foundOn[j] == type );

				if ( inGroup )
				{
					int index = Utility.Random( 1 + group.Entries.Length );

					if ( index == 0 )
						return group.m_Super.Name;

					return group.Entries[index - 1].Name;
				}
			}

			return SlayerName.Silver;
		}

		static SlayerGroup()
		{
			SlayerGroup humanoid = new SlayerGroup();
			SlayerGroup undead = new SlayerGroup();
			SlayerGroup elemental = new SlayerGroup();
			SlayerGroup abyss = new SlayerGroup();
			SlayerGroup arachnid = new SlayerGroup();
			SlayerGroup reptilian = new SlayerGroup();
			SlayerGroup wizard = new SlayerGroup();
			SlayerGroup avian = new SlayerGroup();
			SlayerGroup slimy = new SlayerGroup();
			SlayerGroup animal = new SlayerGroup();
			SlayerGroup giant = new SlayerGroup();
			SlayerGroup golem = new SlayerGroup();
			SlayerGroup weed = new SlayerGroup();
			SlayerGroup neptune = new SlayerGroup();
			SlayerGroup fey = new SlayerGroup();

			humanoid.Opposition = new SlayerGroup[]{ };
			humanoid.FoundOn = new Type[]{ };
			humanoid.Super = new SlayerEntry( SlayerName.Repond, 
				typeof( PirateCaptain ), 
				typeof( PirateCrew ), 
				typeof( PirateCrewBow ), 
				typeof( PirateCrewMage ), 
				typeof( PirateLand ), 
				typeof( PirateMen ), 
				typeof( PirateNatives ), 
				typeof( BloodAssassin ), 
				typeof( NativeArcher ), 
				typeof( Locathah ), 
				typeof( SeaHag ), 
				typeof( SeaHagGreater ), 
				typeof( Native ), 
				typeof( BoatSailorMage ), 
				typeof( BoatSailorArcher ), 
				typeof( BoatSailorBard ), 
				typeof( BoatPirateMage ), 
				typeof( BoatPirateArcher ), 
				typeof( BoatPirateBard ), 
				typeof( Minstrel ), 
				typeof( NativeWitchDoctor ), 
				typeof( Berserker ), 
				typeof( Adventurers ), 
				typeof( SavageAlien ), 
				typeof( BombWorshipper ), 
				typeof( Syth ), 
				typeof( Jedi ),
				typeof( Psionicist ), 
				typeof( Monks ), 
				typeof( Brigand ), 
				typeof( PirateCult ), 
				typeof( SailorGuards ), 
				typeof( SailorMerchant ), 
				typeof( Bugbear ), 
				typeof( Gnoll ), 
				typeof( Kilrathi ), 
				typeof( KilrathiGunner ), 
				typeof( Rogue ), 
				typeof( Executioner ), 
				typeof( EvilMage ),
				typeof( EvilMageLord ), 
				typeof( ArcticOgreLord ), 
				typeof( Cyclops ), 
				typeof( PirateCyclops ),
				typeof( AncientCyclops ), 
				typeof( ShamanicCyclops ), 
				typeof( ZornTheBlacksmith ), 
				typeof( Ettin ), 
				typeof( AncientEttin ), 
				typeof( EttinShaman ), 
				typeof( PirateEttinMage ), 
				typeof( Bandit ), 
				typeof( Tritun ), 
				typeof( TritunMage ), 
				typeof( Medusa ), 
				typeof( MindFlayer ), 
				typeof( SeaGiant ), 
				typeof( DeepSeaGiant ), 
				typeof( StormGiant ), 
				typeof( CloudGiant ), 
				typeof( StarGiant ), 
				typeof( AbyssGiant ), 
				typeof( JungleGiant ), 
				typeof( FrostTroll ), 
				typeof( TrollWitchDoctor ), 
				typeof( FrostTrollShaman ), 
				typeof( SeaTroll ), 
				typeof( SwampTroll ), 
 				typeof( Trollbear ), 
				typeof( ArcticEttin ), 
				typeof( TundraOgre ), 
				typeof( Ogre ), 
				typeof( OgreLord ), 
				typeof( PirateOgreLord ), 
				typeof( AbysmalOgre ), 
				typeof( OgreMagi ), 
				typeof( ForestGiant ),
				typeof( IceGiant ),
				typeof( LavaGiant ),
				typeof( HillGiant ), 
				typeof( HillGiantShaman ), 
 				typeof( SwampThing ), 
				typeof( MountainGiant ), 
				typeof( StoneGiant ), 
				typeof( FireGiant ), 
				typeof( UndeadGiant ), 
				typeof( ZombieGiant ), 
				typeof( FrostGiant ), 
				typeof( Neanderthal ), 
				typeof( Morlock ), 
				typeof( Durgar ), 
				typeof( SandGiant ), 
				typeof( Urk ), 
				typeof( UrkShaman ), 
				typeof( Urc ), 
				typeof( UrcBowman ), 
				typeof( UrcShaman ), 
				typeof( Orc ), 
				typeof( OrcBomber ), 
				typeof( OrkRogue ), 
				typeof( OrkWarrior ), 
				typeof( SailorOrkGuards ), 
				typeof( OrkMonks ), 
				typeof( OrkMage ), 
				typeof( OrcCaptain ), 
				typeof( Hobgoblin ), 
				typeof( Goblin ), 
				typeof( GoblinArcher ), 
				typeof( OrcishLord ), 
				typeof( Orx ), 
				typeof( OrxWarrior ), 
				typeof( OrcishMage ), 
				typeof( Gnome ), 
				typeof( GnomeWarrior ), 
				typeof( GnomeMage ), 
				typeof( Ratman ), 
				typeof( RatmanArcher ), 
				typeof( RatmanMage ), 
				typeof( Titan ), 
				typeof( PirateTitan ), 
				typeof( ElderTitan ), 
				typeof( PirateTroll ),
                typeof( RoyalKnight ),
                typeof( Tiguson ),
                typeof( TigusonGunner ),
                typeof( TitanGod ),
                typeof( TitanKing ),
                typeof( TitanWarrior ),
                typeof( Spartan ),
                typeof( SpartanLord ),
                typeof( SpartanSage ),
                typeof( SpartanWench ),
                typeof( VolcaniteChieftain ),
                typeof( VolcaniteShaman ),
                typeof( VolcaniteWarrior ),
                typeof( AqueathHighborn ),
                typeof( AqueathHighbornPriest ),
                typeof( AqueathLayPriest ),
                typeof( AqueathPeon ),
                typeof( AqueathSpawn ),
                typeof( Norlop ),
                typeof( Hobbit ),
                typeof( HobbitMage ),
                typeof( HobbitWarrior ),
                typeof( Hermit ),
                typeof( MrSaunders ),
                typeof( PeterPan ),
                typeof( LostBoyArcher ),
                typeof( LostBoy ),
                typeof( Corsair ),
                typeof(Minotaur),
                typeof(MinotaurCaptain),
                typeof(MinotaurScout),
                typeof(MinotaurSmall),
                typeof(MinotaurScoutChamp),
                typeof(MinotaurCaptainChamp),
                typeof(MinotaurChamp),
                typeof(TormentedMinotaur),
                typeof( Troll ) );
			humanoid.Entries = new SlayerEntry[]
				{
					new SlayerEntry( SlayerName.OgreTrashing, 
						typeof( Ogre ), 
						typeof( TundraOgre ), 
						typeof( OgreLord ), 
						typeof( PirateOgreLord ), 
						typeof( AbysmalOgre ), 
						typeof( Dragonogre ), 
						typeof( PirateDragonogre ), 
						typeof( OgreMagi ), 
						typeof( ArcticOgreLord ) ),
					new SlayerEntry( SlayerName.OrcSlaying, 
						typeof( Urk ), 
						typeof( UrkShaman ),
						typeof( Urc ), 
						typeof( UrcBowman ), 
						typeof( UrcShaman ), 
						typeof( Orc ), 
						typeof( OrkRogue ), 
						typeof( OrkWarrior ), 
						typeof( OrkMonks ), 
						typeof( OrkMage ), 
						typeof( OrcBomber ), 
						typeof( OrcCaptain ), 
						typeof( OrcishLord ), 
						typeof( SailorOrkGuards ), 
						typeof( Orx ), 
						typeof( OrxWarrior ), 
						typeof( OrcishMage ) ),
					new SlayerEntry( SlayerName.TrollSlaughter, 
						typeof( Troll ), 
						typeof( PirateTroll ), 
						typeof( SwampTroll ), 
						typeof( Trollbear ), 
						typeof( TrollWitchDoctor ), 
						typeof( FrostTrollShaman ), 
						typeof( SeaTroll ), 
						typeof( FrostTroll ) )
				};

			undead.Opposition = new SlayerGroup[]{ };
			undead.FoundOn = new Type[]{ };
			undead.Super = new SlayerEntry( SlayerName.Silver, 
				typeof( AncientLich ), 
				typeof( LichKing ), 
				typeof( BaronAlmric ), 
				typeof( ZombieSpider ), 
				typeof( TitanLich ), 
				typeof( MummyGiant ), 
				typeof( Surtaz ), 
				typeof( SoulReaper ), 
				typeof( Zombiex ),
				typeof( FailedExperiment ),
				typeof( DeepDweller ),
				typeof( DemiLich ), 
				typeof( Spectres ), 
				typeof( BoneKnight ), 
				typeof( BoneSlasher ), 
				typeof( KhumashGor ), 
				typeof( SkeletalSamurai ),
				typeof( BoneSailor ),
				typeof( BoneMagi ), 
				typeof( FleshGolem ), 
				typeof( ReanimatedDragon ), 
				typeof( FrankenFighter ), 
				typeof( VampiricDragon ), 
				typeof( Watcher ), 
				typeof( AncientFleshGolem ), 
				typeof( SkinGolem ), 
				typeof( SoulWorm ), 
				typeof( Ghoul ), 
				typeof( GrundulVarg ), 
				typeof( Murk ), 
				typeof( Kull ), 
				typeof( LostKnight ), 
				typeof( AquaticGhoul ), 
				typeof( Wight ), 
				typeof( HellSteed ), 
				typeof( Ghostly ), 
				typeof( Shroud ), 
				typeof( Vordo ), 
				typeof( GhostWarrior ), 
				typeof( SkeletalPirate ), 
				typeof( GiantSkeleton ), 
				typeof( GhostPirate ), 
				typeof( GhostWizard ), 
				typeof( Lich ), 
				typeof( LichLord ), 
				typeof( Nazghoul ), 
				typeof( PirateUndead ), 
				typeof( PirateDarkLord ), 
				typeof( PirateGhost ), 
				typeof( PirateLich ), 
				typeof( PirateLichLord ), 
				typeof( PirateSkeleton ), 
				typeof( WereWolf ), 
				typeof( NecroticHound ), 
				typeof( IceGhoul ), 
				typeof( DiseasedMummy ), 
				typeof( Mummy ), 
				typeof( MummyLord ), 
				typeof( Revenant ), 
				typeof( RevenantLion ), 
				typeof( RottingCorpse ), 
				typeof( WalkingCorpse ), 
				typeof( GraveSeeker ), 
				typeof( SkeletalWarrior ), 
				typeof( Spirit ), 
				typeof( DeadReaper ), 
				typeof( WolfMan ), 
				typeof( Shade ), 
				typeof( SkeletalKnight ), 
				typeof( DeathBear ), 
				typeof( DeathWolf ), 
				typeof( UndeadDruid ), 
				typeof( SkeletalWizard ), 
				typeof( DeadKnight ), 
				typeof( ZombieDragon ),
 				typeof( DragonGhost ), 
				typeof( GhostDragyn ), 
				typeof( UndeadGiant ), 
				typeof( ZombieGiant ), 
				typeof( RottingSquid ), 
				typeof( SkeletalDragon ), 
				typeof( SkeletonDragon ), 
				typeof( Dracolich ), 
				typeof( SkeletonHorse ), 
				typeof( SkeletalMage ), 
				typeof( SkeletalMount ), 
				typeof( Skeleton ), 
				typeof( SkeletonArcher ), 
				typeof( Spectre ), 
				typeof( GhostGargoyle ), 
				typeof( DemonicGhost ), 
				typeof( SpectralGargoyle ), 
				typeof( Wraith ), 
				typeof( SeaGhost ), 
				typeof( FrailSkeleton ), 
				typeof( Phantom ), 
				typeof( Vampire ), 
				typeof( VampireLord ), 
				typeof( VampirePrince ), 
				typeof( VampireWoods ), 
				typeof( Dracula ), 
				typeof( FrozenCorpse ), 
				typeof( ZombieGargoyle ), 
				typeof( SummonedCorpse ), 
				typeof( SeaZombie ), 
				typeof( ZombieMage ), 
				typeof( Zombie ) );
			undead.Entries = new SlayerEntry[0];

			fey.Opposition = new SlayerGroup[]{ };
			fey.FoundOn = new Type[]{ };
			fey.Super = new SlayerEntry( SlayerName.Fey, 
				typeof( Centaur ), 
				typeof( EtherealWarrior ), 
				typeof( Kirin ), 
				typeof( Pixie ), 
				typeof( Fairy ), 
				typeof( ElfBoatSailorArcher ), 
				typeof( ElfBoatSailorMage ), 
				typeof( ElfBoatSailorBard ), 
				typeof( ElfBoatPirateArcher ), 
				typeof( ElfBoatPirateMage ), 
				typeof( ElfBoatPirateBard ), 
				typeof( ElfRogue ), 
				typeof( ElfMinstrel ), 
				typeof( ElfPirateCaptain ), 
				typeof( ElfPirateCrew ), 
				typeof( ElfPirateCrewBow ), 
				typeof( ElfBerserker ), 
				typeof( ElfMonks ), 
				typeof( ElfMage ), 
				typeof( PirateDrow ), 
				typeof( SailorElfGuards ), 
				typeof( SailorElf ), 
				typeof( Unicorn ), 
				typeof( Dreadhorn ), 
				typeof( Pegasus ), 
				typeof( DarkUnicorn ), 
				typeof( DarkUnicornRiding ), 
				typeof( Wisp ), 
				typeof( MLDryad ), 
				typeof( xDryad ), 
				typeof( Xatyr ), 
				typeof( Satyr ),
                typeof( FaeFolk ),
                typeof( Faery ),
                typeof( LightElfBerserker ),
                typeof( LightElfMage ),
                typeof( LightElfMinstrel ),
                typeof( LightElfMonks ),
                typeof( PeterPan ),
                typeof( LostBoyArcher ),
                typeof( LostBoy ),
                typeof( Tinkerbell ),
                typeof( LightElfRogue ) );
            fey.Entries = new SlayerEntry[0];

			//////////////// WIZARD ADDED ///////////////////
			wizard.Opposition = new SlayerGroup[]{ };
			wizard.FoundOn = new Type[]{ };
			wizard.Super = new SlayerEntry( SlayerName.WizardSlayer, 
				typeof( ElfMage ), 
				typeof( ElfBoatSailorMage ), 
				typeof( PirateCrewMage ), 
				typeof( BoatSailorMage ), 
				typeof( SeaHag ), 
				typeof( SeaHagGreater ), 
				typeof( FungalMage ), 
				typeof( Psionicist ), 
				typeof( Archmage ), 
				typeof( DrakkulMage ), 
				typeof( ZombieMage ), 
				typeof( DriderWizard ),
				typeof( OgreMagi ), 
				typeof( EttinShaman ), 
				typeof( PirateEttinMage ), 
				typeof( HillGiantShaman ), 
				typeof( UrcShaman ), 
				typeof( EvilMage ), 
				typeof( PirateCult ), 
				typeof( EvilMageLord ), 
				typeof( MindFlayer ), 
				typeof( NativeWitchDoctor ), 
				typeof( RatmanMage ), 
				typeof( GnomeMage ), 
				typeof( SavageShaman ), 
				typeof( TritunMage ), 
				typeof( OrcishMage ), 
				typeof( NeptarWizard ), 
				typeof( OrkMage ), 
				typeof( UrkShaman ), 
				typeof( KoboldMage ), 
				typeof( SaklethMage ), 
				typeof( ReptalarShaman ), 
				typeof( OphidianArchmage ), 
				typeof( PirateOphidian ), 
				typeof( OphidianMage ), 
				typeof( OphidianMatriarch ), 
				typeof( SerpentarWizard ), 
				typeof( SerpynSorceress ), 
				typeof( AncientLich ), 
				typeof( TitanLich ), 
				typeof( Spectres ), 
				typeof( BoneMagi ), 
				typeof( GhostWizard ), 
				typeof( Lich ), 
				typeof( LichKing ), 
				typeof( Surtaz ), 
				typeof( LichLord ), 
				typeof( PirateLich ), 
				typeof( PirateLichLord ), 
				typeof( Nazghoul ), 
				typeof( Vordo ), 
				typeof( SkeletalMage ), 
				typeof( SkeletalWizard ),
                typeof( Norlop ),
                typeof( UndeadDruid ) );
			wizard.Entries = new SlayerEntry[0];

			//////////////// WIZARD ADDED ///////////////////
			avian.Opposition = new SlayerGroup[]{ };
			avian.FoundOn = new Type[]{ };
			avian.Super = new SlayerEntry( SlayerName.AvianHunter, 
				typeof( Bird ), 
				typeof( Chicken ), 
				typeof( Crane ), 
				typeof( Eagle ), 
				typeof( Harpy ), 
				typeof( HarpyHen ), 
				typeof( GiantHawk ), 
				typeof( GiantRaven ), 
				typeof( HarpyElder ), 
				typeof( Griffon ), 
				typeof( GriffonRiding ), 
				typeof( Hippogriff ), 
				typeof( HippogriffRiding ), 
				typeof( Pegasus ), 
				typeof( AxeBeak ), 
				typeof( Phoenix ), 
				typeof( SnowHarpy ), 
				typeof( StoneHarpy ), 
				typeof( SwampBird ), 
				typeof( DesertBird ),
                typeof(Mockobo),
                typeof( TropicalBird ) );
			avian.Entries = new SlayerEntry[0];

			//////////////// WIZARD ADDED ///////////////////
			slimy.Opposition = new SlayerGroup[]{ };
			slimy.FoundOn = new Type[]{ };
			slimy.Super = new SlayerEntry( SlayerName.SlimyScourge, 
				typeof( BlackPudding ), 
				typeof( BloodWorm ), 
				typeof( SlimeDevil ), 
				typeof( CarcassWorm ), 
				typeof( GreenSlime ), 
				typeof( Slitheran ), 
				typeof( LavaPuddle ), 
				typeof( FrostOoze ), 
				typeof( GiantLeech ), 
				typeof( MarshWurm ), 
				typeof( GiantLamprey ), 
				typeof( BogThing ), 
				typeof( Quagmire ), 
				typeof( Slime ), 
				typeof( SoulWorm ), 
				typeof( Alien ), 
				typeof( AlienSmall ), 
				typeof( AlienSpider ), 
				typeof( Shaclaw ), 
				typeof( Viscera ) );
			slimy.Entries = new SlayerEntry[0];

			//////////////// WIZARD ADDED ///////////////////
			animal.Opposition = new SlayerGroup[]{ };
			animal.FoundOn = new Type[]{ };
			animal.Super = new SlayerEntry( SlayerName.AnimalHunter, 
				typeof( MysticalFox ), 
				typeof( BlackBear ), 
				typeof( SabreclawCub ), 
				typeof( Bugbear ), 
				typeof( Gnoll ), 
				typeof( SabretoothBear ), 
				typeof( SabretoothBearRiding ), 
				typeof( Boar ), 
				typeof( BrownBear ), 
				typeof( ElderBrownBear ), 
				typeof( ElderBlackBear ), 
				typeof( ElderPolarBear ), 
				typeof( ElderBrownBearRiding ), 
				typeof( ElderBlackBearRiding ), 
				typeof( ElderPolarBearRiding ), 
				typeof( Unicorn ), 
				typeof( Dreadhorn ), 
				typeof( Pegasus ), 
				typeof( DarkUnicorn ), 
				typeof( DarkUnicornRiding ), 
				typeof( Panda ), 
				typeof( Bull ), 
				typeof( Megalodon ), 
				typeof( Shark ), 
				typeof( GreatWhite ), 
				typeof( Grum ), 
				typeof( Ramadon ), 
				typeof( PoisonFrog ), 
				typeof( BullFrog ), 
				typeof( Frog ), 
				typeof( Toad ), 
				typeof( Cat ), 
				typeof( CaveBear ), 
				typeof( CaveBearRiding ), 
				typeof( Cougar ), 
				typeof( SabretoothCub ), 
				typeof( SabretoothTiger ), 
				typeof( WhiteCat ), 
				typeof( BlackCat ), 
				typeof( Cow ), 
				typeof( DireBoar ), 
				typeof( DireWolf ), 
				typeof( Jackalwitch ), 
				typeof( NecroticHound ), 
				typeof( MadDog ), 
				typeof( BlackWolf ), 
				typeof( WhiteWolf ), 
				typeof( WinterWolf ), 
				typeof( Dog ), 
				typeof( Fox ), 
				typeof( Ferret ), 
				typeof( FireBat ), 
				typeof( FireToad ), 
				typeof( Bullradon ), 
				typeof( BullradonRiding ), 
				typeof( GiantBat ), 
				typeof( Bat ), 
				typeof( AlbinoBat ), 
				typeof( Stirge ), 
				typeof( GiantCrab ), 
				typeof( SicklyRat ), 
				typeof( GiantRat ), 
				typeof( GiantToad ), 
				typeof( Goat ), 
				typeof( Gorgon ), 
				typeof( GorgonRiding ), 
				typeof( Gorilla ), 
				typeof( Infected ), 
				typeof( Ape ), 
				typeof( GreatHart ), 
				typeof( Antelope ), 
				typeof( GreyWolf ), 
				typeof( GrizzlyBear ),
				typeof( GrizzlyBearRiding ),
				typeof( KodiakBear ),
				typeof( Griffon ), 
				typeof( Hippogriff ), 
				typeof( GriffonRiding ), 
				typeof( HippogriffRiding ), 
 				typeof( Owlbear ), 
 				typeof( Trollbear ), 
				typeof( Elephant ), 
				typeof( Mastadon ), 
				typeof( Tuskadon ), 
				typeof( Mammoth ), 
				typeof( HellCat ), 
				typeof( HellHound ), 
				typeof( HellBeast ), 
				typeof( Cerberus ), 
				typeof( DemonDog ), 
				typeof( Hind ), 
				typeof( IceToad ), 
				typeof( Jackal ), 
				typeof( JackRabbit ), 
				typeof( Weasel ),
				typeof( Lion ), 
				typeof( LionRiding ), 
				typeof( SnowLion ), 
				typeof( CragCat ), 
				typeof( Llama ), 
				typeof( Mongbat ), 
				typeof( MountainGoat ), 
				typeof( PackHorse ), 
				typeof( Zebra ), 
				typeof( PackMule ), 
				typeof( HenchHorse ), 
				typeof( Horse ), 
				typeof( PackLlama ), 
				typeof( Panther ), 
				typeof( Bobcat ), 
				typeof( Pig ), 
				typeof( PredatorHellCat ), 
				typeof( Rabbit ), 
				typeof( Rat ), 
				typeof( Sewerrat ), 
				typeof( Mouse ), 
				typeof( ShadowHound ), 
				typeof( Sheep ), 
				typeof( SnowLeopard ), 
				typeof( Tiger ), 
				typeof( Jaguar ), 
				typeof( WhiteTiger ), 
				typeof( Squirrel ), 
				typeof( TimberWolf ), 
				typeof( VampireBat ), 
				typeof( VorpalBunny ), 
				typeof( Walrus ), 
				typeof( WereWolf ), 
				typeof( WolfMan ), 
				typeof( DarkHound ), 
				typeof( DiseasedRat ), 
				typeof( WhiteRabbit ), 
				typeof( DeathBear ), 
				typeof( DeathWolf ) );
			animal.Entries = new SlayerEntry[0];

			//////////////// WIZARD ADDED ///////////////////
			giant.Opposition = new SlayerGroup[]{ };
			giant.FoundOn = new Type[]{ };
			giant.Super = new SlayerEntry( SlayerName.GiantKiller, 
				typeof( ArcticOgreLord ),
				typeof( AbysmalOgre ),  
				typeof( Cyclops ),
				typeof( PirateCyclops ),
 				typeof( AncientCyclops ), 
				typeof( ShamanicCyclops ), 
				typeof( ZornTheBlacksmith ), 
				typeof( Ettin ), 
				typeof( HillGiant ), 
				typeof( MummyGiant ), 
				typeof( TitanLich ), 
				typeof( HillGiantShaman ), 
				typeof( AncientEttin ), 
				typeof( EttinShaman ), 
				typeof( PirateEttinMage ), 
				typeof( FireGiant ), 
				typeof( UndeadGiant ), 
				typeof( ZombieGiant ), 
				typeof( ForestGiant ), 
				typeof( IceGiant ),
				typeof( LavaGiant ),
				typeof( SwampThing ), 
				typeof( MountainGiant ), 
				typeof( StoneGiant ), 
				typeof( FrostGiant ), 
				typeof( FrostTroll ), 
				typeof( TrollWitchDoctor ), 
				typeof( FrostTrollShaman ), 
				typeof( Ogre ), 
				typeof( OgreLord ), 
				typeof( PirateOgreLord ), 
				typeof( OgreMagi ), 
				typeof( SandGiant ), 
				typeof( SeaGiant ), 
				typeof( DeepSeaGiant ), 
				typeof( StormGiant ), 
				typeof( StarGiant ), 
				typeof( CloudGiant ), 
				typeof( AbyssGiant ), 
				typeof( SwampTroll ), 
 				typeof( Trollbear ), 
				typeof( Titan ), 
				typeof( PirateTitan ), 
				typeof( ElderTitan ), 
				typeof( Troll ), 
				typeof( PirateTroll ), 
				typeof( TundraOgre ),
                typeof(TitanGod),
                typeof(TitanKing),
                typeof(TitanWarrior),
                typeof( ArcticEttin ) );
			giant.Entries = new SlayerEntry[0];

			//////////////// WIZARD ADDED ///////////////////
			golem.Opposition = new SlayerGroup[]{ };
			golem.FoundOn = new Type[]{ };
			golem.Super = new SlayerEntry( SlayerName.GolemDestruction, 
				typeof( BoneGolem ), 
				typeof( Exodus ), 
				typeof( FleshGolem ), 
				typeof( ReanimatedDragon ), 
				typeof( Mutant ), 
				typeof( AncientFleshGolem ), 
				typeof( FrankenFighter ), 
				typeof( GolemFighter ), 
				typeof( Robot ), 
				typeof( SkinGolem ), 
				typeof( Golem ), 
				typeof( IceGolem ), 
				typeof( MetalGolem ), 
				typeof( CombatDroid ), 
				typeof( BattleDroid ), 
				typeof( MaintenanceDroid ), 
				typeof( SecurityDroid ), 
				typeof( ServiceDroid ), 
				typeof( ExcavationDroid ), 
				typeof( RustGolem ), 
				typeof( ManureGolem ), 
				typeof( CaddelliteGolem ), 
				typeof( IronCobra ), 
				typeof( IronBeetle ), 
				typeof( DragonGolem ), 
				typeof( WaxSculpture ), 
				typeof( LivingBronzeStatue ), 
				typeof( LivingGoldStatue ), 
				typeof( LivingIronStatue ), 
				typeof( AnyStatue ), 
				typeof( LivingShadowIronStatue ), 
				typeof( LivingJadeStatue ), 
				typeof( LivingMarbleStatue ), 
				typeof( LivingSilverStatue ), 
				typeof( LivingStoneStatue ), 
				typeof( MechanicalScorpion ), 
				typeof( WoodenGolem ) );
			golem.Entries = new SlayerEntry[0];

			//////////////// WIZARD ADDED ///////////////////
			weed.Opposition = new SlayerGroup[]{ };
			weed.FoundOn = new Type[]{ };
			weed.Super = new SlayerEntry( SlayerName.WeedRuin, 
				typeof( Bogling ), 
				typeof( KelpElemental ), 
				typeof( WeedElemental ), 
				typeof( BogThing ), 
				typeof( BloodLotus ), 
				typeof( Corpser ),  
				typeof( WoodlandDevil ), 
				typeof( Fungal ),  
				typeof( FungalMage ), 
				typeof( CreepingFungus ), 
				typeof( SwampThing ), 
				typeof( DarkReaper ), 
				typeof( TheAncientTree ), 
				typeof( DeadReaper ), 
				typeof( Reaper ), 
				typeof( Ent ), 
				typeof( AncientEnt ), 
				typeof( EvilEnt ), 
				typeof( StrangleVine ), 
				typeof( SeaWeeder ), 
				typeof( SeaweedElemental ), 
				typeof( SwampTentacle ), 
				typeof( WalkingReaper ), 
				typeof( WhippingVine ) );
			weed.Entries = new SlayerEntry[0];

			//////////////// WIZARD ADDED ///////////////////
			neptune.Opposition = new SlayerGroup[]{ };
			neptune.FoundOn = new Type[]{ };
			neptune.Super = new SlayerEntry( SlayerName.NeptunesBane, 
				typeof( AquaticGhoul ), 
				typeof( SeaWeeder ), 
				typeof( Sleestax ), 
				typeof( SeaSnake ), 
				typeof( WaterBeetle ), 
				typeof( WaterBeetleRiding ), 
				typeof( WaterStrider ), 
				typeof( SeaGhost ), 
				typeof( OilSlick ), 
				typeof( FloatingEye ), 
				typeof( SeaTroll ), 
				typeof( WaterSpawn ), 
				typeof( TitanHydros ), 
				typeof( WaterElemental ), 
				typeof( DeepWaterElemental ), 
				typeof( Neptar ), 
				typeof( NeptarWizard ), 
				typeof( Megalodon ), 
				typeof( Lochasaur ), 
				typeof( Shark ), 
				typeof( GreatWhite ), 
				typeof( GiantCrab ), 
				typeof( Lobstran ), 
				typeof( GiantLamprey ), 
				typeof( Locathah ), 
				typeof( StormCloud ), 
				typeof( SeaHag ), 
				typeof( WaterWeird ), 
				typeof( KelpElemental ), 
				typeof( SeaweedElemental ), 
				typeof( Raptus ), 
				typeof( Lurker ), 
				typeof( Kraken ), 
				typeof( Calamari ), 
				typeof( SeaHorses ), 
				typeof( Krakoa ),
 				typeof( SeaZombie ), 
				typeof( Dagon ), 
				typeof( GiantEel ), 
				typeof( GiantSquid ), 
				typeof( RottingSquid ), 
				typeof( SeaSerpent ), 
				typeof( SeaDrake ), 
				typeof( Wyvra ), 
				typeof( EyeOfTheDeep ), 
				typeof( Typhoon ), 
				typeof( WaterNaga ), 
				typeof( SeaHagGreater ), 
				typeof( Leviathan ), 
				typeof( DragonTurtle ), 
				typeof( SeaDragon ), 
				typeof( DeepSeaDragon ), 
				typeof( SeaGiant ), 
				typeof( DeepSeaGiant ), 
				typeof( DeepSeaSerpent ), 
				typeof( Jormungandr ), 
				typeof( Cronosaurus ), 
				typeof( DemonOfTheSea ), 
				typeof( DeepSeaDevil ), 
				typeof( StormGiant ), 
				typeof( BoneSailor ), 
				typeof( Snapper ), 
				typeof( Turtle ), 
				typeof( Tritun ), 
				typeof( TritunMage ) );
			neptune.Entries = new SlayerEntry[0];

			elemental.Opposition = new SlayerGroup[]{ };
			elemental.FoundOn = new Type[]{ };
			elemental.Super = new SlayerEntry( SlayerName.ElementalBan, 
				typeof( ToxicElemental ), 
				typeof( AcidPuddle ), 
				typeof( AgapiteElemental ), 
				typeof( AirElemental ), 
				typeof( TitanStratos ), 
				typeof( WineElemental ), 
				typeof( SummonedAirElemental ), 
				typeof( SummonedAirElementalGreater ), 
				typeof( DriftwoodElemental ), 
				typeof( BloodElemental ), 
				typeof( BloodSpawn ), 
				typeof( GarnetElemental ), 
				typeof( CaddelliteElemental ), 
				typeof( CinderElemental ), 
				typeof( TopazElemental ), 
				typeof( QuartzElemental ), 
				typeof( SpinelElemental ), 
				typeof( StarRubyElemental ), 
				typeof( XormiteElemental ), 
				typeof( DilithiumElemental ), 
				typeof( TrilithiumElemental ), 
				typeof( SapphireElemental ), 
				typeof( BronzeElemental ), 
				typeof( CopperElemental ), 
				typeof( CrystalElemental ), 
				typeof( CrystalDragon ), 
				typeof( DullCopperElemental ), 
				typeof( IceColossus ), 
				typeof( Necromental ), 
				typeof( StoneGiant ), 
				typeof( EarthElemental ), 
				typeof( TitanLithos ), 
				typeof( GraveDustElemental ), 
				typeof( SilverElemental ), 
				typeof( WeedElemental ), 
				typeof( KelpElemental ), 
				typeof( StoneElemental ), 
				typeof( StoneRoper ), 
				typeof( StoneDragon ), 
				typeof( Typhoon ), 
				typeof( CrystalGoliath ), 
				typeof( MetalBeetle ), 
				typeof( MetalDragon ), 
				typeof( AnyElemental ), 
				typeof( AnimatedRocks ), 
				typeof( GemElemental ), 
				typeof( AnyGemElemental ), 
				typeof( SummonedEarthElemental ), 
				typeof( SummonedEarthElementalGreater ), 
				typeof( Efreet ), 
				typeof( Ifreet ),
				typeof( Afreet ),
				typeof( Vulcrum ), 
				typeof( MagmaElemental ), 
				typeof( MeteorElemental ), 
				typeof( FireElemental ), 
				typeof( LavaElemental ), 
				typeof( DustElemental ), 
				typeof( MudElemental ), 
				typeof( ObsidianElemental ), 
				typeof( MudMan ), 
				typeof( SewageElemental ), 
				typeof( ElectricalElemental ), 
				typeof( StormCloud ), 
				typeof( SummonedFireElemental ), 
				typeof( SummonedFireElementalGreater ), 
				typeof( GoldenElemental ), 
				typeof( IceElemental ), 
				typeof( IcebergElemental ), 
				typeof( ForestElemental ), 
				typeof( PoisonElemental ), 
				typeof( LightningElemental ), 
				typeof( SandVortex ), 
				typeof( ShadowIronElemental ), 
				typeof( SnowElemental ), 
				typeof( ValoriteElemental ), 
				typeof( VeriteElemental ), 
				typeof( SeaweedElemental ), 
				typeof( OilSlick ), 
				typeof( WaterSpawn ), 
				typeof( WaterWeird ), 
				typeof( TitanHydros ), 
				typeof( WaterElemental ), 
				typeof( DeepWaterElemental ), 
				typeof( SteamElemental ), 
				typeof( SummonedWaterElementalGreater ), 
				typeof( SummonedWaterElemental ) );
			elemental.Entries = new SlayerEntry[]
				{
					new SlayerEntry( SlayerName.BloodDrinking, 
						typeof( GiantLeech ), 
						typeof( MarshWurm ), 
						typeof( GiantLamprey ), 
						typeof( BloodDemigod ), 
						typeof( BloodDemon ), 
						typeof( Succubus ), 
						typeof( BloodSnake ), 
						typeof( BloodWorm ), 
						typeof( Stirge ), 
						typeof( Vampire ), 
						typeof( VampireLord ), 
						typeof( VampirePrince ), 
						typeof( VampireWoods ), 
						typeof( Dracula ), 
						typeof( BloodElemental ),
						typeof( BloodSpawn ) ), 
					new SlayerEntry( SlayerName.EarthShatter, 
						typeof( AgapiteElemental ), 
						typeof( ObsidianElemental ), 
						typeof( BronzeElemental ), 
						typeof( CopperElemental ), 
						typeof( DullCopperElemental ), 
						typeof( GarnetElemental ), 
						typeof( CaddelliteElemental ), 
						typeof( TopazElemental ), 
						typeof( QuartzElemental ), 
						typeof( SpinelElemental ), 
						typeof( StarRubyElemental ), 
						typeof( SapphireElemental ), 
						typeof( EarthElemental ), 
						typeof( TitanLithos ), 
						typeof( StoneGiant ), 
						typeof( MountainGiant ), 
						typeof( GraveDustElemental ), 
						typeof( SilverElemental ), 
						typeof( StoneElemental ), 
						typeof( StoneRoper ), 
						typeof( StoneDragon ), 
						typeof( AnyGemElemental ), 
						typeof( GemElemental ), 
						typeof( AnimatedRocks ), 
						typeof( AnyElemental ), 
						typeof( CrystalGoliath ), 
						typeof( Necromental ), 
						typeof( SummonedEarthElemental ), 
						typeof( SummonedEarthElementalGreater ), 
						typeof( GoldenElemental ), 
						typeof( ShadowIronElemental ), 
						typeof( ValoriteElemental ), 
						typeof( VeriteElemental ) ),
					new SlayerEntry( SlayerName.ElementalHealth, 
						typeof( IronCobra ), 
						typeof( IronBeetle ), 
						typeof( MechanicalScorpion ), 
						typeof( AcidPuddle ), 
						typeof( Scorpion ), 
						typeof( DeadlyScorpion ), 
						typeof( ShadowRecluse ), 
						typeof( AlienSpider ), 
						typeof( PhaseSpider ), 
						typeof( SandSpider ), 
						typeof( WaterStrider ), 
						typeof( GiantBlackWidow ), 
						typeof( Tarantula ), 
						typeof( MonstrousSpider ), 
						typeof( AbyssCrawler ), 
						typeof( CaveFisher ), 
						typeof( PoisonElemental ),
						typeof( SewageElemental ) ),
					new SlayerEntry( SlayerName.FlameDousing, 
						typeof( Vulcrum ), 
						typeof( FireElemental ), 
						typeof( LavaElemental ), 
						typeof( MagmaElemental ), 
						typeof( MeteorElemental ), 
						typeof( TitanPyros ), 
						typeof( Sunlyte ), 
						typeof( Phoenix ), 
						typeof( FireSteed ),
						typeof( FireGiant ),
						typeof( LavaDragon ),
						typeof( AshDragon ),
						typeof( FireBeetle ),
						typeof( Lavapede ),
						typeof( FireGargoyle ),
						typeof( LavaGiant ),
						typeof( LavaLizard ),
						typeof( LavaSerpent ),
						typeof( FireNaga ), 
						typeof( FireSalamander ),
						typeof( LavaSnake ),
						typeof( CinderElemental ), 
						typeof( FireMephit ), 
						typeof( FireWyrmling ), 
						typeof( VolcanicDragon ), 
						typeof( PrimevalVolcanicDragon ), 
						typeof( PrimevalFireDragon ), 
						typeof( LavaDragon ), 
						typeof( OilSlick ), 
						typeof( FireToad ), 
						typeof( LavaPuddle ),
						typeof( FireDemon ),
						typeof( FireBat ),
                        typeof( VolcaniteChieftain ),
                        typeof( VolcaniteShaman ),
                        typeof( VolcaniteWarrior ),
                        typeof( SummonedFireElementalGreater ), 
						typeof( SummonedFireElemental ) ),
					new SlayerEntry( SlayerName.SummerWind, 
						typeof( SnowElemental ), 
						typeof( IceElemental ),
						typeof( SnowHarpy ),
						typeof( IceDragon ),
						typeof( WinterWolf ),
						typeof( IceToad ),
						typeof( IceGhoul ),
						typeof( IceGolem ),
						typeof( IceColossus ),
						typeof( IceSteed ),
						typeof( FrostGiant ),
						typeof( FrostOoze ),
						typeof( FrostSpider ),
						typeof( IceGiant ),
						typeof( FrostTroll ),
						typeof( FrostTrollShaman ), 
						typeof( IceDevil ),
						typeof( IceSerpent ),
						typeof( IceSnake ),
						typeof( IcebergElemental ) ),
					new SlayerEntry( SlayerName.Vacuum, 
						typeof( SandVortex ), 
						typeof( DustElemental ), 
						typeof( PoisonCloud ), 
						typeof( StormCloud ), 
						typeof( AirElemental ), 
						typeof( TitanStratos ), 
						typeof( Typhoon ), 
						typeof( SummonedAirElementalGreater ), 
						typeof( SummonedAirElemental ) ),
					new SlayerEntry( SlayerName.WaterDissipation, 
						typeof( WaterSpawn ), 
						typeof( WaterElemental ), 
						typeof( DeepWaterElemental ), 
						typeof( TitanHydros ), 
						typeof( SewageElemental ), 
						typeof( MudElemental ), 
						typeof( MudMan ), 
						typeof( StormCloud ), 
						typeof( Typhoon ), 
						typeof( WaterWeird ), 
						typeof( SteamElemental ),
                        typeof( AqueathHighborn ),
                        typeof( AqueathHighbornPriest ),
                        typeof( AqueathLayPriest ),
                        typeof( AqueathPeon ),
                        typeof( AqueathSpawn ),
                        typeof( SummonedWaterElementalGreater ), 
						typeof( SummonedWaterElemental ) )
				};

			abyss.Opposition = new SlayerGroup[]{ };
			abyss.FoundOn = new Type[]{ };
			abyss.Super = new SlayerEntry( SlayerName.Exorcism, 
				typeof( Tarjan ), 
				typeof( BloodDemigod ), 
				typeof( DemonOfTheSea ), 
				typeof( Vrock ), 
				typeof( DeepSeaDevil ), 
				typeof( Xurtzar ), 
				typeof( Balron ), 
				typeof( Archfiend ), 
				typeof( TitanPyros ),
				typeof( Satan ), 
				typeof( Marilith ), 
				typeof( FireMephit ), 
				typeof( BlackGateDemon ), 
				typeof( FireDemon ), 
				typeof( SlimeDevil ), 
				typeof( LesserDemon ), 
				typeof( LowerDemon ), 
				typeof( ShadowDemon ), 
				typeof( Devil ), 
				typeof( PirateDevil ), 
				typeof( Demon ), 
				typeof( BloodDemon ), 
				typeof( BoneDemon ), 
				typeof( Daemon ), 
				typeof( PirateDemon ), 
				typeof( PirateGargoyle ), 
				typeof( PirateDemoness ), 
				typeof( PirateDaemon ), 
				typeof( Kuthulu ),
				typeof( Fiend ), 
				typeof( DaemonTemplate ), 
				typeof( Daemonic ), 
				typeof( AbysmalDaemon ), 
				typeof( SummonedDaemon ), 
				typeof( SummonedDaemonGreater ), 
				typeof( FireGargoyle ), 
				typeof( Gargoyle ), 
				typeof( StygianGargoyle ), 
				typeof( StygianGargoyleLord ), 
				typeof( DemonicGhost ), 
				typeof( ZombieGargoyle ), 
				typeof( GhostGargoyle ), 
				typeof( GargoyleRuby ), 
				typeof( CodexGargoyleA ), 
				typeof( CodexGargoyleB ), 
				typeof( GargoyleOnyx ), 
				typeof( GargoyleMarble ), 
				typeof( GargoyleEmerald ), 
				typeof( GargoyleAmethyst ), 
				typeof( GargoyleSapphire ), 
				typeof( SpectralGargoyle ), 
				typeof( AncientGargoyle ), 
				typeof( MutantGargoyle ), 
				typeof( CosmicGargoyle ), 
				typeof( ShadowHound ), 
				typeof( HordeMinion ), 
				typeof( IceDevil ), 
				typeof( Imp ), 
				typeof( StoneGargoyle ), 
				typeof( GargoyleWarrior ), 
				typeof( Succubus ), 
				typeof( PirateSuccubus ), 
				typeof( GuardianWolf ) );

			abyss.Entries = new SlayerEntry[]
				{
					new SlayerEntry( SlayerName.GargoylesFoe, 
						typeof( FireGargoyle ), 
						typeof( Gargoyle ), 
						typeof( PirateGargoyle ), 
						typeof( AncientGargoyle ), 
						typeof( MutantGargoyle ), 
						typeof( CosmicGargoyle ), 
						typeof( GhostGargoyle ), 
						typeof( SpectralGargoyle ), 
						typeof( ZombieGargoyle ), 
						typeof( StygianGargoyle ), 
						typeof( StygianGargoyleLord ), 
						typeof( GargoyleRuby ), 
						typeof( CodexGargoyleA ), 
						typeof( CodexGargoyleB ), 
						typeof( GargoyleOnyx ), 
						typeof( GargoyleMarble ), 
						typeof( GargoyleEmerald ), 
						typeof( GargoyleAmethyst ), 
						typeof( GargoyleSapphire ), 
						typeof( GargoyleWarrior ), 
						typeof( StoneGargoyle ) ),
					new SlayerEntry( SlayerName.BalronDamnation, 
						typeof( Tarjan ), 
						typeof( BloodDemigod ), 
						typeof( Xurtzar ), 
						typeof( Balron ), 
						typeof( Archfiend ), 
						typeof( TitanPyros ), 
						typeof( Satan ), 
						typeof( Marilith ), 
						typeof( BlackGateDemon ), 
						typeof( FireDemon ), 
						typeof( DeepSeaDevil ), 
						typeof( SlimeDevil ), 
						typeof( Devil ), 
						typeof( PirateDevil ), 
						typeof( BloodDemon ), 
						typeof( IceDevil ) ),
					new SlayerEntry( SlayerName.DaemonDismissal, 
						typeof( DemonOfTheSea ), 
						typeof( FireDemon ), 
						typeof( AbysmalDaemon ), 
						typeof( SlimeDevil ),
						typeof( Vrock ), 
						typeof( ShadowDemon ), 
						typeof( DemonicGhost ), 
						typeof( Daemon ), 
						typeof( PirateDaemon ), 
						typeof( PirateDemon ), 
						typeof( PirateDemoness ), 
						typeof( Kuthulu ),
						typeof( Fiend ), 
						typeof( DaemonTemplate ), 
						typeof( Daemonic ), 
						typeof( Demon ), 
						typeof( BoneDemon ), 
						typeof( SummonedDaemonGreater ), 
						typeof( SummonedDaemon ) ),
				};

			arachnid.Opposition = new SlayerGroup[]{ };
			arachnid.FoundOn = new Type[]{ };
			arachnid.Super = new SlayerEntry( SlayerName.ArachnidDoom, 
				typeof( DreadSpider ), 
				typeof( ShadowRecluse ), 
				typeof( ZombieSpider ), 
				typeof( FrostSpider ), 
				typeof( WaterStrider ), 
				typeof( GiantBlackWidow ), 
				typeof( Tarantula ), 
				typeof( MonstrousSpider ), 
				typeof( AlienSpider ), 
				typeof( PhaseSpider ), 
				typeof( Drider ), 
				typeof( DriderWizard ),
				typeof( AbyssCrawler ), 
				typeof( CaveFisher ), 
				typeof( Arachnar ), 
				typeof( GiantSpider ), 
				typeof( SandSpider ), 
				typeof( Scorpion ), 
				typeof( DeadlyScorpion ), 
				typeof( TerathanAvenger ), 
				typeof( TerathanDrone ), 
				typeof( TerathanMatriarch ), 
				typeof( TerathanWarrior ) );
			arachnid.Entries = new SlayerEntry[]
				{
					new SlayerEntry( SlayerName.ScorpionsBane, 
						typeof( Scorpion ), 
						typeof( DeadlyScorpion ) ), 
					new SlayerEntry( SlayerName.SpidersDeath, 
						typeof( DreadSpider ), 
						typeof( ShadowRecluse ), 
						typeof( ZombieSpider ), 
						typeof( LargeSpider ), 
						typeof( FrostSpider ), 
						typeof( GiantBlackWidow ), 
						typeof( AlienSpider ), 
						typeof( Tarantula ), 
						typeof( Drider ), 
						typeof( DriderWizard ),
						typeof( MonstrousSpider ), 
						typeof( AbyssCrawler ), 
						typeof( CaveFisher ), 
						typeof( Arachnar ), 
						typeof( WaterStrider ), 
						typeof( SandSpider ), 
						typeof( GiantSpider ) ), 
					new SlayerEntry( SlayerName.Terathan, 
						typeof( TerathanAvenger ), 
						typeof( TerathanDrone ), 
						typeof( TerathanMatriarch ), 
						typeof( Drider ), 
						typeof( DriderWizard ),
						typeof( TerathanWarrior ) )
				};

			reptilian.Opposition = new SlayerGroup[]{ };
			reptilian.FoundOn = new Type[]{ };
			reptilian.Super = new SlayerEntry( SlayerName.ReptilianDeath, 
				typeof( Drakkul ), 
				typeof( DrakkulMage ), 
				typeof( DrakkulChief ), 
				typeof( JungleViper ), 
				typeof( Ravenous ), 
				typeof( RavenousRiding ), 
				typeof( RaptorRiding ), 
				typeof( Raptor ),
				typeof( ForestOstard ), 
				typeof( FrenziedOstard ), 
				typeof( SnowOstard ), 
				typeof( JadeSerpent ), 
				typeof( BloodSnake ), 
				typeof( AncientWyrm ), 
				typeof( OnyxWyrm ), 
				typeof( EmeraldWyrm ), 
				typeof( AmethystWyrm ), 
				typeof( SapphireWyrm ), 
				typeof( GarnetWyrm ), 
				typeof( TopazWyrm ), 
				typeof( RubyWyrm ), 
				typeof( SpinelWyrm ), 
				typeof( QuartzWyrm ), 
				typeof( FireWyrmling ), 
				typeof( DeepSeaSerpent ), 
				typeof( Jormungandr ), 
				typeof( Cronosaurus ), 
				typeof( GiantEel ), 
				typeof( SeaDragon ), 
				typeof( PrimevalSeaDragon ), 
				typeof( DeepSeaDragon ), 
				typeof( CaddelliteDragon ), 
				typeof( GoldenSerpent ), 
				typeof( DragonKing ), 
				typeof( LavaDragon ), 
				typeof( IceDragon ), 
				typeof( GrayDragon ), 
				typeof( VolcanicDragon ), 
				typeof( AshDragon ), 
				typeof( SummonDragon ), 
				typeof( ZombieDragon ), 
				typeof( DragonGhost ), 
				typeof( GhostDragyn ), 
				typeof( Dragon ), 
				typeof( Dragons ), 
				typeof( BabyDragon ), 
				typeof( BottleDragon ), 
				typeof( RadiationDragon ), 
				typeof( CrystalDragon ), 
				typeof( VoidDragon ), 
				typeof( ElderDragon ), 
				typeof( BlackDragon ), 
				typeof( AsianDragon ), 
				typeof( PrimevalFireDragon ), 
				typeof( PrimevalGreenDragon ), 
				typeof( PrimevalNightDragon ), 
				typeof( PrimevalRedDragon ), 
				typeof( PrimevalRoyalDragon ), 
				typeof( PrimevalRunicDragon ), 
				typeof( PrimevalSeaDragon ), 
				typeof( ReanimatedDragon ), 
				typeof( VampiricDragon ), 
				typeof( PrimevalAbysmalDragon ), 
				typeof( PrimevalAmberDragon ), 
				typeof( PrimevalBlackDragon ), 
				typeof( PrimevalDragon ), 
				typeof( PrimevalSilverDragon ), 
				typeof( PrimevalVolcanicDragon ), 
				typeof( PrimevalStygianDragon ), 
				typeof( StoneDragon ), 
				typeof( BlueDragon ), 
				typeof( SlasherOfVoid ), 
				typeof( MetalDragon ), 
				typeof( GreenDragon ), 
				typeof( DragonTurtle ), 
				typeof( Dragonogre ), 
				typeof( PirateDragonogre ), 
				typeof( WhiteDragon ), 
				typeof( Hydra ), 
				typeof( EnergyHydra ), 
				typeof( Drake ), 
				typeof( AbysmalDrake ), 
				typeof( AncientDrake ), 
				typeof( SwampDrake ), 
				typeof( SwampDrakeRiding ), 
				typeof( GiantIceWorm ), 
				typeof( IceSerpent ), 
				typeof( GiantSerpent ), 
				typeof( GiantSnake ), 
				typeof( RandomSerpent ), 
				typeof( Roc ), 
				typeof( IceSnake ), 
				typeof( Iguana ), 
				typeof( SeaSnake ), 
				typeof( SummonSnakes ), 
				typeof( LavaSerpent ), 
				typeof( FireSalamander ),
				typeof( LargeSnake ), 
				typeof( GiantLizard ), 
				typeof( Basilisk ), 
				typeof( CaveLizard ), 
				typeof( Alligator ), 
				typeof( SwampGator ), 
				typeof( Snapper ), 
				typeof( Turtle ), 
				typeof( Toraxen ), 
				typeof( Stalker ), 
				typeof( GiantAdder ), 
				typeof( HugeLizard ), 
				typeof( Kobold ), 
				typeof( KoboldMage ), 
				typeof( LizardmanArcher ), 
				typeof( MutantLizardman ), 
				typeof( SaklethArcher ), 
				typeof( Sakleth ), 
				typeof( Grathek ), 
				typeof( PirateGrathek ), 
				typeof( PirateSakleth ), 
				typeof( Sleestax ), 
				typeof( SaklethMage ), 
				typeof( Reptalar ), 
				typeof( ReptalarShaman ), 
				typeof( ReptalarChieftain ), 
				typeof( Meglasaur ), 
				typeof( Stegosaurus ), 
				typeof( Styguana ), 
				typeof( Tyranasaur ), 
				typeof( Lochasaur ), 
				typeof( Titanoboa ), 
				typeof( Basilosaurus ), 
				typeof( Iguanodon ), 
				typeof( SavageRidgeback ), 
				typeof( Ridgeback ), 
				typeof( Teradactyl ), 
				typeof( Gorceratops ), 
				typeof( GorceratopsRiding ), 
				typeof( Naga ), 
				typeof( FireNaga ), 
				typeof( WaterNaga ), 
				typeof( Raptus ), 
				typeof( LavaSnake ), 
				typeof( YoungRoc ), 
				typeof( Lizardman ), 
				typeof( Reptaur ), 
				typeof( OphidianArchmage ), 
				typeof( OphidianKnight ), 
				typeof( OphidianMage ), 
				typeof( OphidianMatriarch ), 
				typeof( OphidianWarrior ), 
				typeof( PirateOphidian ), 
				typeof( PirateSnakeMan ), 
				typeof( Serpentar ), 
				typeof( SerpentarWizard ), 
				typeof( Serpyn ), 
				typeof( SerpynChampion ), 
				typeof( SerpynSorceress ), 
				typeof( SeaSerpent ), 
				typeof( GemDragon ), 
				typeof( ShadowWyrm ), 
				typeof( SilverSerpent ), 
				typeof( SkeletalDragon ), 
				typeof( SkeletonDragon ), 
				typeof( Dracolich ), 
				typeof( Snake ), 
				typeof( SwampDragon ), 
				typeof( WhiteWyrm ), 
				typeof( Wyrms ), 
				typeof( NightWyrm ), 
				typeof( JungleWyrm ), 
				typeof( DesertWyrm ), 
				typeof( MountainWyrm ), 
				typeof( Wyvern ), 
				typeof( Wyverns ), 
				typeof( AncientWyvern ), 
				typeof( SeaDrake ), 
				typeof( Wyvra ),
                typeof( HatchlingDragon ),
                typeof( PrimevalSplendidDragon ),
                typeof( SplendidDragon ),
                typeof( SplendidDrake ),
                typeof( Haptah ),
                typeof( HaptahArcher ),
                typeof( HaptahMage ),
                typeof( Meepter ),
                typeof( MeepterMage ),
                typeof( Prith ),
                typeof( PrithChieftain ),
                typeof( PrithShaman ),
                typeof( Slith ),
                typeof( SlithArcher ),
                typeof( Slither ),
                typeof( Serpentaur ) );
			reptilian.Entries = new SlayerEntry[]
				{
					new SlayerEntry( SlayerName.DragonSlaying, 
						typeof( Drakkul ), 
						typeof( DrakkulMage ), 
						typeof( DrakkulChief ), 
						typeof( AncientWyrm ), 
						typeof( VolcanicDragon ), 
						typeof( AshDragon ), 
						typeof( Dragon ), 
						typeof( Dragons ), 
						typeof( BabyDragon ), 
						typeof( FireWyrmling ), 
						typeof( GemDragon ), 
						typeof( BottleDragon ), 
						typeof( RadiationDragon ), 
						typeof( CrystalDragon ), 
						typeof( VoidDragon ), 
						typeof( ElderDragon ), 
						typeof( BlackDragon ), 
						typeof( AsianDragon ), 
						typeof( PrimevalFireDragon ), 
						typeof( PrimevalGreenDragon ), 
						typeof( PrimevalNightDragon ), 
						typeof( PrimevalRedDragon ), 
						typeof( PrimevalRoyalDragon ), 
						typeof( PrimevalRunicDragon ), 
						typeof( PrimevalSeaDragon ), 
						typeof( ReanimatedDragon ), 
						typeof( VampiricDragon ), 
						typeof( PrimevalAbysmalDragon ), 
						typeof( PrimevalAmberDragon ), 
						typeof( PrimevalBlackDragon ), 
						typeof( PrimevalDragon ), 
						typeof( PrimevalSilverDragon ), 
						typeof( PrimevalVolcanicDragon ), 
						typeof( PrimevalStygianDragon ), 
						typeof( DragonKing ), 
						typeof( LavaDragon ), 
						typeof( NightWyrm ), 
						typeof( JungleWyrm ), 
						typeof( OnyxWyrm ), 
						typeof( EmeraldWyrm ), 
						typeof( AmethystWyrm ), 
						typeof( SapphireWyrm ), 
						typeof( GarnetWyrm ), 
						typeof( TopazWyrm ), 
						typeof( RubyWyrm ), 
						typeof( SpinelWyrm ), 
						typeof( QuartzWyrm ), 
						typeof( DesertWyrm ), 
						typeof( MountainWyrm ), 
						typeof( IceDragon ), 
						typeof( BlueDragon ), 
						typeof( SlasherOfVoid ), 
						typeof( MetalDragon ), 
						typeof( GreenDragon ), 
						typeof( Dragonogre ), 
						typeof( PirateDragonogre ), 
						typeof( DragonTurtle ), 
						typeof( CaddelliteDragon ), 
						typeof( GrayDragon ), 
						typeof( WhiteDragon ), 
						typeof( SummonDragon ), 
						typeof( ZombieDragon ), 
						typeof( DragonGhost ), 
						typeof( GhostDragyn ), 
						typeof( SeaDragon ), 
						typeof( DeepSeaDragon ), 
						typeof( Hydra ), 
						typeof( EnergyHydra ), 
						typeof( Drake ),
						typeof( AbysmalDrake ),
						typeof( AncientDrake ), 
						typeof( SwampDrake ),  
						typeof( SwampDrakeRiding ),  
						typeof( Roc ), 
						typeof( YoungRoc ), 
						typeof( ShadowWyrm ), 
						typeof( SkeletalDragon ),
                        typeof( HatchlingDragon ),
                        typeof( PrimevalSplendidDragon ),
                        typeof( SplendidDragon ),
                        typeof( SplendidDrake ),
                typeof( SkeletonDragon ), 
						typeof( Dracolich ), 
						typeof( SwampDragon ), 
						typeof( Wyrms ), 
						typeof( WhiteWyrm ), 
						typeof( SeaDrake ), 
						typeof( Wyvra ), 
						typeof( Wyvern ),
						typeof( Wyverns ),
						typeof( AncientWyvern ) ),
					new SlayerEntry( SlayerName.LizardmanSlaughter, 
						typeof( Drakkul ), 
						typeof( DrakkulMage ), 
						typeof( DrakkulChief ), 
						typeof( Kobold ), 
						typeof( KoboldMage ), 
						typeof( LizardmanArcher ), 
						typeof( Grathek ), 
						typeof( PirateGrathek ), 
						typeof( PirateSakleth ), 
						typeof( Sleestax ), 
						typeof( MutantLizardman ), 
						typeof( SaklethArcher ), 
						typeof( Sakleth ), 
						typeof( SaklethMage ), 
						typeof( Reptalar ), 
						typeof( ReptalarShaman ), 
						typeof( ReptalarChieftain ), 
						typeof( Reptaur ),
                        typeof( Haptah ),
                        typeof( HaptahArcher ),
                        typeof( HaptahMage ),
                        typeof( Meepter ),
                        typeof( MeepterMage ),
                        typeof( Prith ),
                        typeof( PrithChieftain ),
                        typeof( PrithShaman ),
                        typeof( Slith ),
                        typeof( SlithArcher ),
                        typeof( Slither ),
                        typeof( Lizardman ) ),
					new SlayerEntry( SlayerName.Ophidian, 
						typeof( OphidianArchmage ), 
						typeof( OphidianKnight ), 
						typeof( OphidianMage ), 
						typeof( OphidianMatriarch ), 
						typeof( OphidianWarrior ),
						typeof( PirateOphidian ), 
						typeof( PirateSnakeMan ), 
						typeof( Serpentar ), 
						typeof( SerpentarWizard ),
						typeof( Naga ), 
						typeof( FireNaga ), 
						typeof( WaterNaga ), 
						typeof( FireSalamander ),
						typeof( Serpyn ), 
						typeof( SerpynChampion ), 
						typeof( SerpynSorceress ), 
						typeof( Serpentaur ), 
						typeof( Medusa ) ), 
					new SlayerEntry( SlayerName.SnakesBane, 
						typeof( JungleViper ), 
						typeof( DeepSeaSerpent ), 
						typeof( Jormungandr ), 
						typeof( GiantIceWorm ), 
						typeof( LargeSnake ), 
						typeof( GiantSerpent ), 
						typeof( GiantSnake ), 
						typeof( Titanoboa ), 
						typeof( RandomSerpent ), 
						typeof( BloodSnake ), 
						typeof( IceSerpent ), 
						typeof( JadeSerpent ), 
						typeof( GoldenSerpent ), 
						typeof( IceSnake ), 
						typeof( LavaSerpent ), 
						typeof( SummonSnakes ), 
						typeof( GiantAdder ),  
						typeof( SeaSnake ), 
						typeof( LavaSnake ), 
						typeof( SeaSerpent ), 
						typeof( SilverSerpent ), 
						typeof( Snake ) )
				};

			m_Groups = new SlayerGroup[]
				{
					humanoid,
					undead,
					elemental,
					abyss,
					arachnid,
					reptilian,
					wizard,
					avian,
					slimy,
					animal,
					giant,
					golem,
					weed,
					neptune,
					fey
				};

			m_TotalEntries = CompileEntries( m_Groups );
		}

		private static SlayerEntry[] CompileEntries( SlayerGroup[] groups )
		{
			SlayerEntry[] entries = new SlayerEntry[36];

			for ( int i = 0; i < groups.Length; ++i )
			{
				SlayerGroup g = groups[i];

				g.Super.Group = g;

				entries[(int)g.Super.Name] = g.Super;

				for ( int j = 0; j < g.Entries.Length; ++j )
				{
					g.Entries[j].Group = g;
					entries[(int)g.Entries[j].Name] = g.Entries[j];
				}
			}

			return entries;
		}

		private SlayerGroup[] m_Opposition;
		private SlayerEntry m_Super;
		private SlayerEntry[] m_Entries;
		private Type[] m_FoundOn;

		public SlayerGroup[] Opposition{ get{ return m_Opposition; } set{ m_Opposition = value; } }
		public SlayerEntry Super{ get{ return m_Super; } set{ m_Super = value; } }
		public SlayerEntry[] Entries{ get{ return m_Entries; } set{ m_Entries = value; } }
		public Type[] FoundOn{ get{ return m_FoundOn; } set{ m_FoundOn = value; } }

		public bool OppositionSuperSlays( Mobile m )
		{
			for( int i = 0; i < Opposition.Length; i++ )
			{
				if ( Opposition[i].Super.Slays( m ) )
					return true;
			}

			return false;
		}

		public SlayerGroup()
		{
		}
	}
}
